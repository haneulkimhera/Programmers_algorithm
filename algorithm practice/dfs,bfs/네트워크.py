from collections import deque

def solution(n, computers):

    answer = 0
    visited = [0]*n

    def dfs(computer):
        for i in range(n):
            if computers[computer][i] == 1 and visited[i] == 0:
                visited[i] = 1
                dfs(i)

    for i in range(n):
        if not visited[i]:
            dfs(i)
            answer+=1

    return answer

computers = [[1, 1, 0], [1, 1, 1], [0, 1, 1]]
print(solution(3,computers))

'''
# 유형
<< DFS - 그래프에서 연결된 요소 찾기 >>

# 문제요구사항
- 컴퓨터의 개수 n, 연결에 대한 정보가 담긴 2차원 배열 computers가 매개변수로 주어질 때, 네트워크의 개수

# 접근
- 가능한 "모든" 네트워크의 개수 => DFS

# 문제풀이
(1) DFS로 탐색
    - 방문하지 않은 노드 중 연결된 노드 발견하면 해당 노드로 재귀함수 호출, 방문표시
    - 재귀함수에서 탈출할 때마다 answer 1 증가
(2) 방문 여부 체크
    - 방문한 컴퓨터는 이미 어떤 네트워크에 속함, 방문처리 해줘야

************************** 핵심 **************************
연결된 네트워크의 개수 => BFS
**********************************************************

!!!!!!!!!!!!!!!!!!!!!!!!!! 주의 !!!!!!!!!!!!!!!!!!!!!!!!!!
재귀함수 호출 조건 확인 시 모든 컴퓨터에 대해 확인해야함. 더 작은 번호의 컴퓨터와의 연결에 대해 조회할 필요 있을 수 있음.
예)  ______
    |     |
    0 1-2-3
!!!!!!!!!!!!!!!!!!!!!!!!!! 주의 !!!!!!!!!!!!!!!!!!!!!!!!!!
'''